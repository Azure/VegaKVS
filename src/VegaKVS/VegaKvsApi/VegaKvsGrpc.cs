// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vegaKvs.proto
// </auto-generated>
// Original file comments:
// Copyright (c) 2018 Microsoft Corporation. All rights reserved.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Microsoft.VegaKvs.Proto {
  public static partial class KeyValueStore
  {
    static readonly string __ServiceName = "Microsoft.VegaKvs.KeyValueStore";

    static readonly grpc::Marshaller<global::Microsoft.VegaKvs.Proto.KeyRequest> __Marshaller_KeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.VegaKvs.Proto.KeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.VegaKvs.Proto.BoolResponse> __Marshaller_BoolResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.VegaKvs.Proto.BoolResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.VegaKvs.Proto.Node> __Marshaller_Node = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.VegaKvs.Proto.Node.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Microsoft.VegaKvs.Proto.NodeResponse> __Marshaller_NodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Microsoft.VegaKvs.Proto.NodeResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.BoolResponse> __Method_Echo = new grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.BoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Echo",
        __Marshaller_KeyRequest,
        __Marshaller_BoolResponse);

    static readonly grpc::Method<global::Microsoft.VegaKvs.Proto.Node, global::Microsoft.VegaKvs.Proto.BoolResponse> __Method_Create = new grpc::Method<global::Microsoft.VegaKvs.Proto.Node, global::Microsoft.VegaKvs.Proto.BoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Node,
        __Marshaller_BoolResponse);

    static readonly grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.NodeResponse> __Method_Read = new grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.NodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_KeyRequest,
        __Marshaller_NodeResponse);

    static readonly grpc::Method<global::Microsoft.VegaKvs.Proto.Node, global::Microsoft.VegaKvs.Proto.BoolResponse> __Method_Update = new grpc::Method<global::Microsoft.VegaKvs.Proto.Node, global::Microsoft.VegaKvs.Proto.BoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Node,
        __Marshaller_BoolResponse);

    static readonly grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.BoolResponse> __Method_Delete = new grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.BoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_KeyRequest,
        __Marshaller_BoolResponse);

    static readonly grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.NodeResponse> __Method_ReadStream = new grpc::Method<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.NodeResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ReadStream",
        __Marshaller_KeyRequest,
        __Marshaller_NodeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Microsoft.VegaKvs.Proto.VegaKvsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KeyValueStore</summary>
    public abstract partial class KeyValueStoreBase
    {
      /// <summary>
      /// For measuring the RPC performance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Microsoft.VegaKvs.Proto.BoolResponse> Echo(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.VegaKvs.Proto.BoolResponse> Create(global::Microsoft.VegaKvs.Proto.Node request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.VegaKvs.Proto.NodeResponse> Read(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.VegaKvs.Proto.BoolResponse> Update(global::Microsoft.VegaKvs.Proto.Node request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Microsoft.VegaKvs.Proto.BoolResponse> Delete(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Bidirectional streaming
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ReadStream(grpc::IAsyncStreamReader<global::Microsoft.VegaKvs.Proto.KeyRequest> requestStream, grpc::IServerStreamWriter<global::Microsoft.VegaKvs.Proto.NodeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KeyValueStore</summary>
    public partial class KeyValueStoreClient : grpc::ClientBase<KeyValueStoreClient>
    {
      /// <summary>Creates a new client for KeyValueStore</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KeyValueStoreClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KeyValueStore that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KeyValueStoreClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KeyValueStoreClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KeyValueStoreClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// For measuring the RPC performance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Echo(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Echo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// For measuring the RPC performance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Echo(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Echo, null, options, request);
      }
      /// <summary>
      /// For measuring the RPC performance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> EchoAsync(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// For measuring the RPC performance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> EchoAsync(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Echo, null, options, request);
      }
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Create(global::Microsoft.VegaKvs.Proto.Node request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Create(global::Microsoft.VegaKvs.Proto.Node request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> CreateAsync(global::Microsoft.VegaKvs.Proto.Node request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> CreateAsync(global::Microsoft.VegaKvs.Proto.Node request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Microsoft.VegaKvs.Proto.NodeResponse Read(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.VegaKvs.Proto.NodeResponse Read(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.NodeResponse> ReadAsync(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.NodeResponse> ReadAsync(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Update(global::Microsoft.VegaKvs.Proto.Node request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Update(global::Microsoft.VegaKvs.Proto.Node request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> UpdateAsync(global::Microsoft.VegaKvs.Proto.Node request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> UpdateAsync(global::Microsoft.VegaKvs.Proto.Node request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Delete(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Microsoft.VegaKvs.Proto.BoolResponse Delete(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> DeleteAsync(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Microsoft.VegaKvs.Proto.BoolResponse> DeleteAsync(global::Microsoft.VegaKvs.Proto.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Bidirectional streaming
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.NodeResponse> ReadStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bidirectional streaming
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Microsoft.VegaKvs.Proto.KeyRequest, global::Microsoft.VegaKvs.Proto.NodeResponse> ReadStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ReadStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KeyValueStoreClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KeyValueStoreClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KeyValueStoreBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Echo, serviceImpl.Echo)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_ReadStream, serviceImpl.ReadStream).Build();
    }

  }
}
#endregion
